// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  username  String
  verified  Boolean  @default(false)
  disabled  Boolean  @default(false)
  profile   Profile?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  gender    Gender
  role      Role     @relation(fields: [roleId], references: [id])
  roleId    Int
  status    Boolean  @default(false)
  avatar    String?
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
  proofs    Proof[]
  notices   Notice[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id      Int       @id @default(autoincrement())
  name    String    @unique
  Profile Profile[]
}

model Proof {
  id        Int      @id @default(autoincrement())
  name      String
  fileSrc   String
  status    Boolean  @default(false)
  profile   Profile? @relation(fields: [profileId], references: [id])
  profileId Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notice {
  id            Int            @id @default(autoincrement())
  comment       String         @db.Text
  author        Profile        @relation(fields: [authorId], references: [id])
  authorId      Int
  school        School         @relation(fields: [schoolId], references: [id])
  schoolId      Int
  criteriaMarks CriteriaMark[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Criteria {
  id            Int            @id @default(autoincrement())
  name          String
  description   String?
  criteriaMarks CriteriaMark[]
}

model CriteriaMark {
  notice     Notice   @relation(fields: [noticeId], references: [id])
  criteria   Criteria @relation(fields: [criteriaId], references: [id])
  noticeId   Int
  criteriaId Int
  value      Float

  @@id([noticeId, criteriaId])
}

model Domain {
  id            Int            @id @default(autoincrement())
  name          String
  description   String?        @db.Text
  parent        Domain?        @relation("DomainToDomain", fields: [parentId], references: [id])
  parentId      Int?
  children      Domain[]       @relation("DomainToDomain")
  sectors       Sector[]
  schoolDomains SchoolDomain[]
}

model Sector {
  id                        Int                        @id @default(autoincrement())
  name                      String
  description               String?                    @db.Text
  price                     Decimal
  domain                    Domain                     @relation(fields: [domainId], references: [id])
  domainId                  Int
  school                    School                     @relation(fields: [schoolId], references: [id])
  schoolId                  Int
  sectorTags                SectorTag[]
  training                  TrainingType               @relation(fields: [trainingTypeId], references: [id])
  trainingTypeId            Int
  sectorTrainingTypeImpacts SectorTrainingTypeImpact[]
}

model TrainingType {
  id                        Int                        @id @default(autoincrement())
  name                      String
  sectors                   Sector[]
  schoolTrainingTypes       SchoolTrainingType[]
  sectorTrainingTypeImpacts SectorTrainingTypeImpact[]
}

model Tag {
  id         Int         @id @default(autoincrement())
  name       String
  sectorTags SectorTag[]
}

model SectorTag {
  sector   Sector @relation(fields: [sectorId], references: [id])
  tag      Tag    @relation(fields: [tagId], references: [id])
  sectorId Int
  tagId    Int

  @@id([sectorId, tagId])
}

model School {
  id                  Int                  @id @default(autoincrement())
  name                String               @unique
  logo                String
  description         String
  shortDescription    String
  devise              String?
  notices             Notice[]
  sectors             Sector[]
  schoolDomains       SchoolDomain[]
  campus              Campus[]
  galleries           Gallery[]
  SchoolTrainingTypes SchoolTrainingType[]
}

model SchoolTrainingType {
  school         School       @relation(fields: [schoolId], references: [id])
  training       TrainingType @relation(fields: [trainingTypeId], references: [id])
  schoolId       Int
  trainingTypeId Int

  @@id([schoolId, trainingTypeId])
}

model SchoolDomain {
  school   School @relation(fields: [schoolId], references: [id])
  domain   Domain @relation(fields: [domainId], references: [id])
  schoolId Int
  domainId Int

  @@id([schoolId, domainId])
}

model Campus {
  id              Int             @id @default(autoincrement())
  name            String
  mail            String
  phone           String
  logo            String?
  school          School          @relation(fields: [schoolId], references: [id])
  adress          Adress          @relation(fields: [adressId], references: [id])
  schoolId        Int
  adressId        Int
  campusGalleries CampusGallery[]
}

model CampusGallery {
  gallery   Gallery @relation(fields: [galleryId], references: [id])
  campus    Campus  @relation(fields: [campusId], references: [id])
  galleryId Int
  campusId  Int

  @@id([galleryId, campusId])
}

model Gallery {
  id              Int             @id @default(autoincrement())
  link            String
  legend          String
  description     String?
  cover           Boolean         @default(false)
  school          School          @relation(fields: [schoolId], references: [id])
  schoolId        Int
  campusGalleries CampusGallery[]
}

model Adress {
  id      Int      @id @default(autoincrement())
  adress  String
  adress2 String?
  zipCode String
  city    City     @relation(fields: [cityId], references: [id])
  cityId  Int
  campus  Campus[]
}

model City {
  id         Int      @id @default(autoincrement())
  name       String
  department String?
  contry     Contry   @relation(fields: [contryId], references: [id])
  contryId   Int
  adresses   Adress[]
}

model Contry {
  id     Int    @id @default(autoincrement())
  name   String
  iso    String
  cities City[]
}

model SectorTrainingTypeImpact {
  sector         Sector       @relation(fields: [sectorId], references: [id])
  tranning       TrainingType @relation(fields: [trainingTypeId], references: [id])
  sectorId       Int
  trainingTypeId Int

  price Float


  @@id([sectorId, trainingTypeId])
}

enum Gender {
  MEN
  FEMALE
  OTHER
}
