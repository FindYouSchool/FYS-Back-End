// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String   @unique
  username  String?
  profile   Profile?
  valid     Boolean  @default(false)
  notices   Notice[]
  createdAt DateTime @default(now())
}

model Profile {
  id        Int      @id @default(autoincrement())
  student   String[]
  company   String
  speaker   String
  employee  String
  teacher   String[]
  guest     Boolean  @default(true)
  ecoleExp  String   @db.VarChar(250)
  notices   Notice[]
  User      User?    @relation(fields: [userId], references: [id])
  userId    Int?     @unique
  valid     Boolean  @default(false)
  avatar    Image    @relation(fields: [imageId], references: [id])
  imageId   String   @unique
  createdAt DateTime @default(now())

}

model Notice {
  id            Int            @id @default(autoincrement())
  comment       String         @db.Text
  profile       Profile?       @relation(fields: [profileId], references: [id])
  profileId     Int?
  school        School?        @relation(fields: [schoolId], references: [id])
  schoolId      Int?           @unique
  criteria_Mark Criteria_Mark?
  author        User?          @relation(fields: [authorId], references: [id])
  authorId      Int
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt


}

model School {
  id                 Int            @id @default(autoincrement())
  sectors            Sector?
  schoolDomain       School_Domain?
  logo               Image          @relation(fields: [imageId], references: [id])
  name               String
  trainingType       String[]
  pointsForts        String[]
  pointsFaibles      String[]
  location           String
  notoriety          String
  schoolVision       String
  outlets            String[]
  diplomaIssued      String[]
  campus             String[]
  lifeSchool         String[]
  prices             String[]
  RegistrationFees   String[]
  capaciteAcceuil    Int
  conditionAdmission String[]
  notice             Notice?
  createdAt          DateTime       @default(now())




  imageId String @unique
}

model School_Domain {
  id Int @id @default(autoincrement())


  School   School? @relation(fields: [schoolId], references: [id])
  schoolId Int?    @unique
  Domain   Domain? @relation(fields: [domainId], references: [id])
  domainId Int?    @unique
}

model Domain {
  id            Int            @id @default(autoincrement())
  school_Domain School_Domain?
  name          String[]
  description   String         @db.Text
  domainId      Int?           @unique

}

model Sector {
  id          Int         @id @default(autoincrement())
  sector_Tag  Sector_Tag?
  name        String[]
  description String      @db.Text
  School      School?     @relation(fields: [schoolId], references: [id])
  schoolId    Int?        @unique
}

model Sector_Tag {
  id Int @id @default(autoincrement())


  Sector   Sector? @relation(fields: [sectorId], references: [id])
  sectorId Int?    @unique
  Tag      Tag?    @relation(fields: [tagId], references: [id])
  tagId    Int?    @unique
}

model Tag {
  id         Int         @id @default(autoincrement())
  name       String[]
  sector_Tag Sector_Tag?



}

model Criteria {
  id            Int            @id @default(autoincrement())
  name          String[]
  description   String
  criteria_Mark Criteria_Mark?

}

model Criteria_Mark {
  id Int @id @default(autoincrement())

  notice     Notice?   @relation(fields: [noticeId], references: [id])
  noticeId   Int?      @unique
  Criteria   Criteria? @relation(fields: [criteriaId], references: [id])
  criteriaId Int?      @unique
  value      Int?      @default(0)
}

model Image {
  id       String    @id @default(cuid())
  publicId String    @unique
  format   String
  version  String
  school   School?
  profile  Profile[]
}
